// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"gitlabhost.rtp.raleigh.ibm.com/spectrum-plugin/core"
)

type FakeSpectrumClient struct {
	CreateFilesetStub        func(filesystem string, name string) error
	createFilesetMutex       sync.RWMutex
	createFilesetArgsForCall []struct {
		filesystem string
		name       string
	}
	createFilesetReturns struct {
		result1 error
	}
	RemoveFilesetStub        func(filesystem string, name string) error
	removeFilesetMutex       sync.RWMutex
	removeFilesetArgsForCall []struct {
		filesystem string
		name       string
	}
	removeFilesetReturns struct {
		result1 error
	}
}

func (fake *FakeSpectrumClient) CreateFileset(filesystem string, name string) error {
	fake.createFilesetMutex.Lock()
	fake.createFilesetArgsForCall = append(fake.createFilesetArgsForCall, struct {
		filesystem string
		name       string
	}{filesystem, name})
	fake.createFilesetMutex.Unlock()
	if fake.CreateFilesetStub != nil {
		return fake.CreateFilesetStub(filesystem, name)
	} else {
		return fake.createFilesetReturns.result1
	}
}

func (fake *FakeSpectrumClient) CreateFilesetCallCount() int {
	fake.createFilesetMutex.RLock()
	defer fake.createFilesetMutex.RUnlock()
	return len(fake.createFilesetArgsForCall)
}

func (fake *FakeSpectrumClient) CreateFilesetArgsForCall(i int) (string, string) {
	fake.createFilesetMutex.RLock()
	defer fake.createFilesetMutex.RUnlock()
	return fake.createFilesetArgsForCall[i].filesystem, fake.createFilesetArgsForCall[i].name
}

func (fake *FakeSpectrumClient) CreateFilesetReturns(result1 error) {
	fake.CreateFilesetStub = nil
	fake.createFilesetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumClient) RemoveFileset(filesystem string, name string) error {
	fake.removeFilesetMutex.Lock()
	fake.removeFilesetArgsForCall = append(fake.removeFilesetArgsForCall, struct {
		filesystem string
		name       string
	}{filesystem, name})
	fake.removeFilesetMutex.Unlock()
	if fake.RemoveFilesetStub != nil {
		return fake.RemoveFilesetStub(filesystem, name)
	} else {
		return fake.removeFilesetReturns.result1
	}
}

func (fake *FakeSpectrumClient) RemoveFilesetCallCount() int {
	fake.removeFilesetMutex.RLock()
	defer fake.removeFilesetMutex.RUnlock()
	return len(fake.removeFilesetArgsForCall)
}

func (fake *FakeSpectrumClient) RemoveFilesetArgsForCall(i int) (string, string) {
	fake.removeFilesetMutex.RLock()
	defer fake.removeFilesetMutex.RUnlock()
	return fake.removeFilesetArgsForCall[i].filesystem, fake.removeFilesetArgsForCall[i].name
}

func (fake *FakeSpectrumClient) RemoveFilesetReturns(result1 error) {
	fake.RemoveFilesetStub = nil
	fake.removeFilesetReturns = struct {
		result1 error
	}{result1}
}

var _ core.SpectrumClient = new(FakeSpectrumClient)
